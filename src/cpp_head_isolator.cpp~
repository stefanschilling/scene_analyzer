#include "ros/ros.h"
#include "std_msgs/String.h"
#include <opencv/cv.h>
#include <opencv/highgui.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <cob_people_detection_msgs/DetectionArray.h>
#include <cob_people_detection_msgs/ColorDepthImageArray.h>
#include <ros/package.h>

#include "scene_analyzer/stamped_string.h"

std::string set="0";
int face_dets;
std::string file_name;
/**
 * This tutorial demonstrates simple receipt of messages over the ROS system.
 */
void voidDeleter(const sensor_msgs::Image* const) {}

void callback1(const scene_analyzer::stamped_string::ConstPtr& msg)
{
    std::string helper = msg->data.c_str();
    unsigned substring = helper.find_last_of("/");
    if (set != helper.substr(substring))
    {
        set = helper.substr(substring);
        std::cout << "start of new set, resetting detection counter\n" << set << "\n";
    }
}

void callback2( const scene_analyzer::stamped_string::ConstPtr& msg)
{
    file_name = msg->data.c_str();
    std::cout << file_name << std::endl;
}

void chatterCallback(const cob_people_detection_msgs::ColorDepthImageArray::ConstPtr& msg)
{
    std::cout << "received msg\n";
    cv_bridge::CvImageConstPtr cv_ptr;
    if (msg->head_detections.size() == 1 && msg->head_detections[0].face_detections.size() ==1)
    {
        
        std::cout << "exactly 1 head and face detected \n";
        std::cout << "Head Detection rect start: " << msg->head_detections[0].head_detection.x << ", " << msg->head_detections[0].head_detection.y << std::endl;
        std::cout << "Width: " << msg->head_detections[0].head_detection.width << ", Height: " << msg->head_detections[0].head_detection.height << std::endl;
        std::cout << "Color image width: " << msg->head_detections[0].color_image.width << ", Height: " << msg->head_detections[0].color_image.height << std::endl;
        std::cout << "Depth Mat width: " << msg->head_detections[0].depth_image.width << ", Height: " << msg->head_detections[0].depth_image.height << std::endl;
        //color
        sensor_msgs::ImageConstPtr imgPtr = boost::shared_ptr<sensor_msgs::Image const>(&(msg->head_detections[0].color_image), voidDeleter);
        try
        {
            cv_ptr = cv_bridge::toCvShare(imgPtr, sensor_msgs::image_encodings::RGB8);
        }
        catch (cv_bridge::Exception& e)
        {
            ROS_ERROR("cv_bridge exception: %s", e.what());
            return;
        }
        cv::Mat img = cv_ptr->image;
        //cv::imshow("Bild",img);
        //cv::waitKey();
        
        //depth
        sensor_msgs::ImageConstPtr msgPtr = boost::shared_ptr<sensor_msgs::Image const>(&(msg->head_detections[0].depth_image), voidDeleter);
		try
		{
			cv_ptr = cv_bridge::toCvShare(msgPtr, sensor_msgs::image_encodings::TYPE_32FC3);
		}
        catch (cv_bridge::Exception& e)
		{
			ROS_ERROR("cv_bridge exception: %s", e.what());
			return;
		}
        cv::Mat xyz = cv_ptr->image;
        
        std::string depth_path, img_path;
        depth_path="/home/stefan/rgbd_db_heads/"+set+"/"+file_name+"_d.xml";
        img_path="/home/stefan/rgbd_db_heads/"+set+"/"+file_name+"_c.bmp";
        
        cv::imwrite(img_path,img);
        std::cout << "writing to: " << depth_path << "\n" << img_path << "\n";
		cv::FileStorage fs(depth_path, cv::FileStorage::WRITE);
		fs << "depthmap" << xyz;
		fs.release();
    }

    std::vector<std::string> head_no;
    head_no.push_back("head_0");
    head_no.push_back("head_1");
    if (msg->head_detections.size() == 2 && msg->head_detections[0].face_detections.size() ==1)
    {
        
        std::cout << "detected face in 1st of 2 head detections \n";
        //color
        for (int i =0; i< msg->head_detections.size(); i++)
        {
        sensor_msgs::ImageConstPtr imgPtr = boost::shared_ptr<sensor_msgs::Image const>(&(msg->head_detections[i].color_image), voidDeleter);
        try
        {
            cv_ptr = cv_bridge::toCvShare(imgPtr, sensor_msgs::image_encodings::RGB8);
        }
        catch (cv_bridge::Exception& e)
        {
            ROS_ERROR("cv_bridge exception: %s", e.what());
            return;
        }
        cv::Mat img = cv_ptr->image;
        //depth
        sensor_msgs::ImageConstPtr msgPtr = boost::shared_ptr<sensor_msgs::Image const>(&(msg->head_detections[i].depth_image), voidDeleter);
		try
		{
			cv_ptr = cv_bridge::toCvShare(msgPtr, sensor_msgs::image_encodings::TYPE_32FC3);
		}
        catch (cv_bridge::Exception& e)
		{
			ROS_ERROR("cv_bridge exception: %s", e.what());
			return;
		}
        cv::Mat xyz = cv_ptr->image;
        
        std::string depth_path, img_path;
        depth_path="/home/stefan/rgbd_db_heads/"+file_name+head_no[i]+"_d.xml";
        img_path="/home/stefan/rgbd_db_heads/"+file_name+head_no[i]+"_c.bmp";
        
        cv::imwrite(img_path,img);
        std::cout << "writing to: " << depth_path << "\n" << img_path << "\n";
		cv::FileStorage fs(depth_path, cv::FileStorage::WRITE);
		fs << "depthmap" << xyz;
		fs.release();
    }
    }
}

int main(int argc, char **argv)
{
    ros::init(argc, argv, "listener");

    ros::NodeHandle n;

    ros::Subscriber sub = n.subscribe("/cob_people_detection/face_detector/face_positions", 1, chatterCallback);
    ros::Subscriber path_sub = n.subscribe("set_path", 1, callback1);
    ros::Subscriber file_sub = n.subscribe("file_name", 1, callback2);
    
    ros::spin();

    return 0;
}
